# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created

name: Spring-Boot Reactive CI with Maven - Master

env:
  AZURE_WEBAPP_NAME: bank-client-service

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
    types: [opened, synchronize, reopened]

jobs:
  test:
    name: Test
    runs-on: ubuntu-20.04
    steps:
      - name: Checking out
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Disabling shallow clone is recommended for improving relevancy of reporting
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: "11"
          distribution: "temurin"
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file
      - name: Test App
        run: mvn -B -ntp clean test

  sonar:
    name: SonarCloud
    runs-on: ubuntu-20.04
    needs: [test]
    steps:
      - name: Checking out
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Disabling shallow clone is recommended for improving relevancy of reporting
      - name: SonarCloud Scan
        run: mvn -B -ntp verify -Psonar
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONARQUBE_HOST }}

  build:
    name: Build
    runs-on: ubuntu-20.04
    needs: [sonar]
    steps:
      - name: Checking out
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Disabling shallow clone is recommended for improving relevancy of reporting

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: "11"
          distribution: "temurin"
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: Build with Maven
        run: mvn -B -ntp clean install --file pom.xml -DskipTests

  docker-app:
    name: Dockering
    runs-on: ubuntu-20.04
    needs: [build]
    steps:
      - name: Checking out
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: "11"
          distribution: "temurin"
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to GitHub container registry
        uses: docker/login-action@v1.10.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Lowercase the repo name
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      - name: Build to GitHub Container Registry
        run: >
          mvn -B -ntp compile jib:build
          -Djib.to.image=ghcr.io/${{ env.REPO }}:latest
          -Djib.to.image.tags=${{ github.sha }}
          -Djib.container.ports=8081

  deploy:
    name: Deploy to Azure
    runs-on: ubuntu-20.04
    needs: docker-app
    environment:
      name: "production"
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Lowercase the repo name
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_DOCKER }}
          images: "ghcr.io/${{ env.REPO }}:latest"
